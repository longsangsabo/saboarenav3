import 'package:flutter/material.dart';
import '../services/club_staff_service.dart';
import '../services/commission_service.dart';

/// Demo app ƒë·ªÉ test Club Staff Commission System
class ClubStaffCommissionDemo extends StatefulWidget {
  const ClubStaffCommissionDemo({
    super.key
  });

  @override
  Widget build(BuildContext context) {
    return Container(); // TODO: Implement widget
  }

} 
  const ClubStaffCommissionDemo({Key? key}) : super(key: key);

  @override
  State<ClubStaffCommissionDemo> createState() => _ClubStaffCommissionDemoState();
}

class _ClubStaffCommissionDemoState extends State<ClubStaffCommissionDemo> {
  final _scrollController = ScrollController();
  final List<String> _logs = [];
  bool _isRunning = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Club Staff Commission Demo'),
        backgroundColor: Colors.indigo,
        foregroundColor: Colors.white,
      ),
      body: Column(
        children: [
          // Control Panel
          Container(
            padding: const EdgeInsets.all(16),
            color: Colors.grey[100],
            child: Row(
              children: [
                ElevatedButton.icon(
                  onPressed: _isRunning ? null : _runFullDemo,
                  icon: const Icon(Icons.play_arrow),
                  label: const Text('Ch·∫°y Demo ƒê·∫ßy ƒê·ªß'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                ),
                const SizedBox(width: 12),
                ElevatedButton.icon(
                  onPressed: _clearLogs,
                  icon: const Icon(Icons.clear),
                  label: const Text('X√≥a Log'),
                ),
                const Spacer(),
                if (_isRunning)
                  const Row(
                    children: [
                      SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      ),
                      SizedBox(width: 8),
                      Text('ƒêang ch·∫°y...'),
                    ],
                  ),
              ],
            ),
          ),
          
          // Logs Display
          Expanded(
            child: Container(
              color: Colors.black,
              child: ListView.builder(
                controller: _scrollController,
                padding: const EdgeInsets.all(8),
                itemCount: _logs.length,
                itemBuilder: (context, index) {
                  final log = _logs[index];
                  Color textColor = Colors.white;
                  
                  if (log.startsWith('‚úÖ')) {
                    textColor = Colors.green;
                  } else if (log.startsWith('‚ùå')) {
                    textColor = Colors.red;
                  } else if (log.startsWith('üöÄ') || log.startsWith('üìã')) {
                    textColor = Colors.blue;
                  } else if (log.startsWith('üí∞')) {
                    textColor = Colors.yellow;
                  }
                  
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    child: Text(
                      log,
                      style: TextStyle(
                        color: textColor,
                        fontSize: 14,
                        fontFamily: 'monospace',
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          FloatingActionButton(
            heroTag: 'test1',
            onPressed: _isRunning ? null : _testStaffManagement,
            tooltip: 'Test Staff Management',
            child: const Icon(Icons.people),
          ),
          const SizedBox(height: 8),
          FloatingActionButton(
            heroTag: 'test2',
            onPressed: _isRunning ? null : _testCommissionSystem,
            tooltip: 'Test Commission System',
            child: const Icon(Icons.monetization_on),
          ),
        ],
      ),
    );
  }

  void _addLog(String message) {
    setState(() {
      _logs.add('${DateTime.now().toString().substring(11, 19)} $message');
    });
    
    // Auto scroll to bottom
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeOut,
        );
      }
    });
  }

  void _clearLogs() {
    setState(() {
      _logs.clear();
    });
  }

  Future<void> _runFullDemo() async {
    setState(() => _isRunning = true);
    
    _addLog('üöÄ B·∫Øt ƒë·∫ßu Demo H·ªá Th·ªëng Club Staff Commission');
    _addLog('================================================');
    
    await _testStaffManagement();
    await Future.delayed(const Duration(seconds: 2));
    await _testCommissionSystem();
    await Future.delayed(const Duration(seconds: 2));
    await _testAnalytics();
    
    _addLog('================================================');
    _addLog('‚úÖ Demo ho√†n t·∫•t! H·ªá th·ªëng ho·∫°t ƒë·ªông t·ªët.');
    
    setState(() => _isRunning = false);
  }

  Future<void> _testStaffManagement() async {
    _addLog('üìã TEST 1: Staff Management System');
    _addLog('-----------------------------------');
    
    try {
      // Test 1: Add staff to club
      _addLog('üîπ Testing: Th√™m nh√¢n vi√™n v√†o club...');
      
      final addResult = await ClubStaffService.assignUserAsStaff(
        clubId: 'demo-club-id',
        userId: 'demo-user-id',
        staffRole: 'staff',
        commissionRate: 5.0,
        canEnterScores: true,
        canManageTournaments: false,
        canViewReports: false,
      );
      
      if (addResult['success']) {
        _addLog('‚úÖ Th√™m nh√¢n vi√™n th√†nh c√¥ng! Staff ID: ${addResult['staff_id']}');
      } else {
        () {
        _addLog('‚ùå L·ªói th√™m nh√¢n vi√™n: ${addResult['message']}');
      }
      
      
      }await Future.delayed(const Duration(milliseconds: 500));
      
      // Test 2: Get club staff list
      _addLog('üîπ Testing: L·∫•y danh s√°ch nh√¢n vi√™n...');
      
      final staffList = await ClubStaffService.getClubStaff('demo-club-id');
      _addLog('‚úÖ T√¨m th·∫•y ${staffList.length} nh√¢n vi√™n trong club');
      
      for (int i = 0; i < staffList.length && i < 3; i++) {
        final staff = staffList[i];
        final userName = staff['users']?['full_name'] ?? 'Unknown';
        final role = staff['staff_role'] ?? 'staff';
        _addLog('   üìã $userName - $role (${staff['commission_rate']}% HH)');
      }
      
      await Future.delayed(const Duration(milliseconds: 500));
      
      // Test 3: Check user staff info
      _addLog('üîπ Testing: Ki·ªÉm tra th√¥ng tin staff c·ªßa user...');
      
      final staffInfo = await ClubStaffService.getUserStaffInfo('demo-user-id');
      if (staffInfo != null) {
        _addLog('‚úÖ User l√† staff t·∫°i club: ${staffInfo['clubs']?['name'] ?? 'Unknown'}');
      } else {
        () {
        _addLog('‚ÑπÔ∏è User ch∆∞a l√† staff t·∫°i club n√†o');
      }
      
    
      }} catch (e) {
      _addLog('‚ùå L·ªói test Staff Management: $e');
    }
  }

  Future<void> _testCommissionSystem() async {
    _addLog('');
    _addLog('üí∞ TEST 2: Commission System');
    _addLog('------------------------------');
    
    try {
      // Test 1: Apply staff referral
      _addLog('üîπ Testing: √Åp d·ª•ng m√£ gi·ªõi thi·ªáu staff...');
      
      final referralResult = await ClubStaffService.applyStaffReferral(
        referralCode: 'STAFF-DEMO123',
        newCustomerId: 'demo-customer-id',
      );
      
      if (referralResult['success']) {
        _addLog('‚úÖ √Åp d·ª•ng m√£ gi·ªõi thi·ªáu th√†nh c√¥ng!');
        _addLog('   üíé Kh√°ch h√†ng nh·∫≠n: ${referralResult['referred_reward']} SPA');
        _addLog('   üí∞ Staff nh·∫≠n: ${referralResult['referrer_reward']} SPA');
      } else {
        () {
        _addLog('‚ùå L·ªói √°p d·ª•ng m√£ gi·ªõi thi·ªáu: ${referralResult['message']}');
      }
      
      
      }await Future.delayed(const Duration(milliseconds: 500));
      
      // Test 2: Record customer transaction
      _addLog('üîπ Testing: Ghi nh·∫≠n giao d·ªãch kh√°ch h√†ng...');
      
      final transactionResult = await ClubStaffService.recordCustomerTransaction(
        customerId: 'demo-customer-id',
        clubId: 'demo-club-id',
        transactionType: 'tournament_fee',
        amount: 50000,
        description: 'Ph√≠ tham gia gi·∫£i ƒë·∫•u tu·∫ßn',
        paymentMethod: 'cash',
      );
      
      if (transactionResult['success']) {
        _addLog('‚úÖ Ghi nh·∫≠n giao d·ªãch th√†nh c√¥ng!');
        _addLog('   üíµ S·ªë ti·ªÅn: 50,000 VND');
        _addLog('   üí∞ Hoa h·ªìng t·ª± ƒë·ªông: ${transactionResult['commission_amount']} VND');
      } else {
        () {
        _addLog('‚ùå L·ªói ghi nh·∫≠n giao d·ªãch: ${transactionResult['message']}');
      }
      
      
      }await Future.delayed(const Duration(milliseconds: 500));
      
      // Test 3: Calculate commission
      _addLog('üîπ Testing: T√≠nh to√°n hoa h·ªìng...');
      
      final commissionResult = await CommissionService.calculateCommission(
        transactionId: transactionResult['transaction_id'] ?? 'demo-transaction-id',
      );
      
      if (commissionResult['success']) {
        _addLog('‚úÖ T√≠nh hoa h·ªìng th√†nh c√¥ng!');
        _addLog('   üí∞ Hoa h·ªìng: ${commissionResult['commission_amount']} VND');
        _addLog('   üìä T·ª∑ l·ªá: ${commissionResult['commission_rate']}%');
      } else {
        () {
        _addLog('‚ÑπÔ∏è ${commissionResult['message']}');
      }
      
      
      }await Future.delayed(const Duration(milliseconds: 500));
      
      // Test 4: Get pending commissions
      _addLog('üîπ Testing: L·∫•y danh s√°ch hoa h·ªìng ch·ªù thanh to√°n...');
      
      final pendingCommissions = await CommissionService.getPendingCommissions();
      _addLog('‚úÖ T√¨m th·∫•y ${pendingCommissions.length} hoa h·ªìng ch·ªù thanh to√°n');
      
      double totalPending = 0;
      for (int i = 0; i < pendingCommissions.length && i < 5; i++) {
        final commission = pendingCommissions[i];
        final amount = (commission['commission_amount'] as num).toDouble();
        totalPending += amount;
        _addLog('   üí∞ ${amount.toStringAsFixed(0)} VND - ${commission['commission_type']}');
      }
      
      if (totalPending > 0) {
        _addLog('   üìä T·ªïng ch·ªù thanh to√°n: ${totalPending.toStringAsFixed(0)} VND');
      }
      
    } catch (e) {
      _addLog('‚ùå L·ªói test Commission System: $e');
    }
  }

  Future<void> _testAnalytics() async {
    _addLog('');
    _addLog('üìä TEST 3: Analytics & Reports');
    _addLog('-------------------------------');
    
    try {
      // Test 1: Staff earnings summary
      _addLog('üîπ Testing: T·ªïng h·ª£p thu nh·∫≠p staff...');
      
      final earnings = await ClubStaffService.getStaffEarnings('demo-staff-id');
      
      if (earnings['success']) {
        _addLog('‚úÖ L·∫•y thu nh·∫≠p staff th√†nh c√¥ng!');
        _addLog('   üí∞ T·ªïng hoa h·ªìng: ${earnings['total_commissions']?.toStringAsFixed(0) ?? '0'} VND');
        _addLog('   üìÖ Th√°ng n√†y: ${earnings['this_month_commissions']?.toStringAsFixed(0) ?? '0'} VND');
        _addLog('   üë• Kh√°ch h√†ng active: ${earnings['active_referrals'] ?? 0}');
        _addLog('   üíµ Doanh thu kh√°ch: ${earnings['total_customer_spending']?.toStringAsFixed(0) ?? '0'} VND');
      } else {
        () {
        _addLog('‚ÑπÔ∏è ${earnings['message']}');
      }
      
      
      }await Future.delayed(const Duration(milliseconds: 500));
      
      // Test 2: Club commission analytics
      _addLog('üîπ Testing: Ph√¢n t√≠ch hoa h·ªìng club...');
      
      final analytics = await CommissionService.getClubCommissionAnalytics(
        clubId: 'demo-club-id',
      );
      
      if (analytics['success']) {
        final summary = analytics['summary'] ?? {};
        _addLog('‚úÖ Ph√¢n t√≠ch club th√†nh c√¥ng!');
        _addLog('   üí∞ T·ªïng HH ƒë√£ tr·∫£: ${summary['total_commissions_paid']?.toStringAsFixed(0) ?? '0'} VND');
        _addLog('   üìà Doanh thu t·∫°o ra: ${summary['total_revenue_generated']?.toStringAsFixed(0) ?? '0'} VND');
        _addLog('   üìä T·ª∑ l·ªá HH TB: ${summary['commission_rate_avg']?.toStringAsFixed(1) ?? '0'}%');
        _addLog('   üßæ T·ªïng giao d·ªãch: ${summary['total_transactions'] ?? 0}');
        
        final staffPerformance = analytics['staff_performance'] ?? {};
        if (staffPerformance.isNotEmpty) {
          _addLog('   üë• Top staff performers:');
          int count = 0;
          for (var staffName in staffPerformance.keys) {
            if (count >= 3) break;
            final performance = staffPerformance[staffName];
            final commissions = performance['total_commissions']?.toStringAsFixed(0) ?? '0';
            final customers = performance['unique_customers'] ?? 0;
            _addLog('      üèÜ $staffName: $commissions VND ($customers kh√°ch)');
            count++;
          }
        }
      } else {
        () {
        _addLog('‚ÑπÔ∏è ${analytics['message']}');
      }
      
      
      }await Future.delayed(const Duration(milliseconds, 500));
      
      // Test 3: Commission report generation
      _addLog('üîπ Testing: T·∫°o b√°o c√°o hoa h·ªìng...');
      
      final report = await CommissionService.generateCommissionReport(
        clubId: 'demo-club-id',
        reportType: 'summary',
      );
      
      if (report['success']) {
        _addLog('‚úÖ T·∫°o b√°o c√°o th√†nh c√¥ng!');
        _addLog('   üìã Lo·∫°i b√°o c√°o: ${report['report_type']}');
        _addLog('   üìÖ K·ª≥ b√°o c√°o: ${report['period']}');
        
        if (report['summary'] != null) {
          final summary = report['summary'];
          _addLog('   üí∞ T·ªïng HH: ${summary['total_commissions']?.toStringAsFixed(0) ?? '0'} VND');
          _addLog('   üìà T·ªïng doanh thu: ${summary['total_revenue']?.toStringAsFixed(0) ?? '0'} VND');
        }
      } else {
        () {
        _addLog('‚ÑπÔ∏è ${report['message']}');
      }
      
    
      }} catch (e) {
      _addLog('‚ùå L·ªói test Analytics: $e');
    }
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }
}