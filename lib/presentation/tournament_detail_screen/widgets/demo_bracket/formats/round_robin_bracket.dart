// üéØ SABO ARENA - Round Robin Bracket
// Complete Round Robin tournament format implementation

import 'package:flutter/material.dart';
import '../components/bracket_components.dart';
import '../shared/tournament_data_generator.dart';

class RoundRobinBracket extends StatelessWidget {
  final int playerCount;
  final VoidCallback? onFullscreenTap;

  const RoundRobinBracket({
    super.key,
    required this.playerCount,
    this.onFullscreenTap,
  });

  @override
  Widget build(BuildContext context) {
    return BracketContainer(
      title: 'Round Robin',
      subtitle: '$playerCount players',
      onFullscreenTap: onFullscreenTap,
      onInfoTap: () => _showRoundRobinInfo(context),
      child: _buildBracketContent(context),
    );
  }

  Widget _buildBracketContent(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStandingsTable(),
          const SizedBox(height: 30),
          _buildRecentMatches(),
        ],
      ),
    );
  }

  Widget _buildStandingsTable() {
    final standings = TournamentDataGenerator.generateRoundRobinStandings(playerCount);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.indigo.shade600,
            borderRadius: BorderRadius.circular(20),
          ),
          child: const Text(
            'üìä B·∫£ng x·∫øp h·∫°ng',
            style: TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
        ),
        const SizedBox(height: 20),
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey.shade300),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.1),
                spreadRadius: 1,
                blurRadius: 4,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Column(
            children: [
              // Header
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(12),
                    topRight: Radius.circular(12),
                  ),
                ),
                child: const Row(
                  children: [
                    SizedBox(width: 40, child: Text('#', style: TextStyle(fontWeight: FontWeight.bold))),
                    Expanded(flex: 3, child: Text('T√™n', style: TextStyle(fontWeight: FontWeight.bold))),
                    SizedBox(width: 60, child: Text('Th·∫Øng', style: TextStyle(fontWeight: FontWeight.bold))),
                    SizedBox(width: 60, child: Text('Thua', style: TextStyle(fontWeight: FontWeight.bold))),
                    SizedBox(width: 60, child: Text('ƒêi·ªÉm', style: TextStyle(fontWeight: FontWeight.bold))),
                  ],
                ),
              ),
              // Standings rows
              ...standings.map((standing) => Container(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                decoration: BoxDecoration(
                  border: Border(
                    bottom: BorderSide(color: Colors.grey.shade200),
                  ),
                ),
                child: Row(
                  children: [
                    SizedBox(
                      width: 40,
                      child: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: _getRankColor(standing['rank']),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          '${standing['rank']}',
                          style: const TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 12,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                    Expanded(
                      flex: 3,
                      child: Text(
                        standing['name'],
                        style: const TextStyle(fontWeight: FontWeight.w500),
                      ),
                    ),
                    SizedBox(
                      width: 60,
                      child: Text(
                        '${standing['wins']}',
                        style: const TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    SizedBox(
                      width: 60,
                      child: Text(
                        '${standing['losses']}',
                        style: const TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
                        textAlign: TextAlign.center,
                      ),
                    ),
                    SizedBox(
                      width: 60,
                      child: Text(
                        '${standing['points']}',
                        style: const TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
                        textAlign: TextAlign.center,
                      ),
                    ),
                  ],
                ),
              )).toList(),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildRecentMatches() {
    final matches = TournamentDataGenerator.generateRoundRobinMatches(playerCount);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: Colors.teal.shade600,
            borderRadius: BorderRadius.circular(20),
          ),
          child: const Text(
            '‚öîÔ∏è K·∫øt qu·∫£ g·∫ßn ƒë√¢y',
            style: TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
          ),
        ),
        const SizedBox(height: 20),
        Wrap(
          spacing: 16,
          runSpacing: 16,
          children: matches.map((match) => MatchCard(match: match)).toList(),
        ),
      ],
    );
  }

  Color _getRankColor(int rank) {
    switch (rank) {
      case 1:
        return Colors.amber.shade600; // Gold
      case 2:
        return Colors.grey.shade500; // Silver
      case 3:
        return Colors.orange.shade700; // Bronze
      default:
        return Colors.blue.shade400; // Regular
    }
  }

  void _showRoundRobinInfo(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.info_outline, color: Colors.blue),
            SizedBox(width: 8),
            Text('Round Robin'),
          ],
        ),
        content: const SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'H√¨nh th·ª©c thi ƒë·∫•u v√≤ng tr√≤n',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              SizedBox(height: 12),
              Text(
                'üîÑ Nguy√™n t·∫Øc c∆° b·∫£n:',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Colors.green,
                ),
              ),
              SizedBox(height: 4),
              Text('‚Ä¢ M·ªçi player ƒë·∫•u v·ªõi m·ªçi player kh√°c'),
              Text('‚Ä¢ M·ªói c·∫∑p ƒë·∫•u ƒë√∫ng 1 l·∫ßn'),
              Text('‚Ä¢ Kh√¥ng c√≥ lo·∫°i tr·ª´, ai c≈©ng ƒë·∫•u h·∫øt'),
              Text('‚Ä¢ X·∫øp h·∫°ng theo ƒëi·ªÉm t√≠ch l≈©y'),
              SizedBox(height: 12),
              Text(
                'üìä T√≠nh ƒëi·ªÉm:',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue,
                ),
              ),
              SizedBox(height: 4),
              Text('‚Ä¢ Th·∫Øng = 3 ƒëi·ªÉm'),
              Text('‚Ä¢ H√≤a = 1 ƒëi·ªÉm (n·∫øu c√≥)'),
              Text('‚Ä¢ Thua = 0 ƒëi·ªÉm'),
              Text('‚Ä¢ X·∫øp h·∫°ng theo t·ªïng ƒëi·ªÉm'),
              SizedBox(height: 12),
              Text(
                '‚ö° ƒê·∫∑c ƒëi·ªÉm:',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Colors.orange,
                ),
              ),
              SizedBox(height: 4),
              Text('‚Ä¢ C√¥ng b·∫±ng nh·∫•t (ai c≈©ng ƒë·∫•u v·ªõi ai)'),
              Text('‚Ä¢ Nhi·ªÅu tr·∫≠n nh·∫•t'),
              Text('‚Ä¢ M·∫•t th·ªùi gian nh·∫•t'),
              Text('‚Ä¢ Ph√π h·ª£p v·ªõi gi·∫£i nh·ªè'),
              SizedBox(height: 12),
              Text(
                'üèÜ ·ª®ng d·ª•ng:',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: Colors.purple,
                ),
              ),
              SizedBox(height: 4),
              Text('‚Ä¢ V√≤ng b·∫£ng World Cup'),
              Text('‚Ä¢ Gi·∫£i ƒë·∫•u c√¢u l·∫°c b·ªô'),
              Text('‚Ä¢ Khi c·∫ßn ƒë√°nh gi√° to√†n di·ªán'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }
}

// Full screen dialog for Round Robin
class RoundRobinFullscreenDialog extends StatelessWidget {
  final int playerCount;

  const RoundRobinFullscreenDialog({
    super.key,
    required this.playerCount,
  });

  @override
  Widget build(BuildContext context) {
    return Dialog.fullscreen(
      child: Scaffold(
        appBar: AppBar(
          title: Text('Round Robin - $playerCount Players'),
          leading: IconButton(
            icon: const Icon(Icons.close),
            onPressed: () => Navigator.of(context).pop(),
          ),
          actions: [
            IconButton(
              icon: const Icon(Icons.info_outline),
              onPressed: () => _showRoundRobinInfo(context),
            ),
          ],
        ),
        body: RoundRobinBracket(playerCount: playerCount),
      ),
    );
  }

  void _showRoundRobinInfo(BuildContext context) {
    // Same info dialog as above
  }
}