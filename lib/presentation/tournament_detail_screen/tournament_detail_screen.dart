import 'package:flutter/material.dart';
// Removed Sizer dependency
import '../../core/layout/responsive.dart';

import 'package:sabo_arena/core/app_export.dart';
import '../../services/tournament_service.dart';
import '../../models/tournament.dart';
import '../../models/user_profile.dart';

import 'widgets/tournament_management_panel.dart';
import 'widgets/tournament_bracket_view.dart';
import 'widgets/participant_management_tab.dart';
import 'widgets/match_management_tab.dart';
import 'widgets/tournament_stats_view.dart';
import '../../widgets/custom_bottom_bar.dart';
import './widgets/participants_list_widget.dart';
import './widgets/prize_pool_widget.dart';
import './widgets/registration_widget.dart';
import './widgets/tournament_bracket_widget.dart';
import './widgets/tournament_header_widget.dart';
import './widgets/tournament_info_widget.dart';
import './widgets/tournament_rules_widget.dart';

class TournamentDetailScreen extends StatefulWidget {
  const TournamentDetailScreen({super.key});

  @override
  State<TournamentDetailScreen> createState() => _TournamentDetailScreenState();
}

class _TournamentDetailScreenState extends State<TournamentDetailScreen>
    with TickerProviderStateMixin {
  late ScrollController _scrollController;
  late TabController _tabController;
  bool _isRegistered = false;
  
  // Service instances
  final TournamentService _tournamentService = TournamentService.instance;
  
  // State variables
  Tournament? _tournament;
  List<UserProfile> _participants = [];
  List<Map<String, dynamic>> _matches = [];
  bool _isLoading = true;
  String? _error;
  String? _tournamentId;
  
  // Tournament data for UI (converted from Tournament model)
  Map<String, dynamic> _tournamentData = {};

  // Mock tournament rules
  final List<String> _tournamentRules = [
    "Gi·∫£i ƒë·∫•u √°p d·ª•ng lu·∫≠t 9-ball qu·ªëc t·∫ø WPA",
    "M·ªói tr·∫≠n ƒë·∫•u thi ƒë·∫•u theo th·ªÉ th·ª©c race to 7 (ai th·∫Øng tr∆∞·ªõc 7 game)",
    "Th·ªùi gian suy nghƒ© t·ªëi ƒëa 30 gi√¢y cho m·ªói c√∫ ƒë√°nh",
    "Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i trong qu√° tr√¨nh thi ƒë·∫•u",
    "Trang ph·ª•c l·ªãch s·ª±, kh√¥ng m·∫∑c √°o ba l·ªó ho·∫∑c qu·∫ßn short",
    "Nghi√™m c·∫•m h√†nh vi gian l·∫≠n, c√£i v√£ v·ªõi tr·ªçng t√†i",
    "Th√≠ sinh ƒë·∫øn mu·ªôn qu√° 15 ph√∫t s·∫Ω b·ªã t∆∞·ªõc quy·ªÅn thi ƒë·∫•u",
    "Quy·∫øt ƒë·ªãnh c·ªßa tr·ªçng t√†i l√† quy·∫øt ƒë·ªãnh cu·ªëi c√πng"
  ];

  // Mock participants data
  final List<Map<String, dynamic>> _participantsData = [
    {
      "id": "player_001",
      "name": "Nguy·ªÖn VƒÉn Minh",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "F",
      "elo": 1850,
      "registrationDate": "2024-09-10"
    },
    {
      "id": "player_002",
      "name": "Tr·∫ßn Th·ªã H∆∞∆°ng",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "G+",
      "elo": 1720,
      "registrationDate": "2024-09-11"
    },
    {
      "id": "player_003",
      "name": "L√™ Ho√†ng Nam",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "F",
      "elo": 1890,
      "registrationDate": "2024-09-12"
    },
    {
      "id": "player_004",
      "name": "Ph·∫°m Th·ªã Lan",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "G",
      "elo": 1680,
      "registrationDate": "2024-09-12"
    },
    {
      "id": "player_005",
      "name": "V√µ Minh Tu·∫•n",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "H",
      "elo": 1520,
      "registrationDate": "2024-09-13"
    },
    {
      "id": "player_006",
      "name": "ƒê·∫∑ng Th·ªã Mai",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "G",
      "elo": 1750,
      "registrationDate": "2024-09-13"
    },
    {
      "id": "player_007",
      "name": "B√πi VƒÉn ƒê·ª©c",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "F+",
      "elo": 1920,
      "registrationDate": "2024-09-14"
    },
    {
      "id": "player_008",
      "name": "Ng√¥ Th·ªã Linh",
      "avatar":
          "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
      "rank": "H+",
      "elo": 1480,
      "registrationDate": "2024-09-14"
    }
  ];

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
    _tabController = TabController(length: 4, vsync: this);
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (_tournamentId == null) {
      final String? id = ModalRoute.of(context)?.settings.arguments as String?;
      if (id != null) {
        _tournamentId = id;
        _loadTournamentData();
      }
    }
  }

  Future<void> _loadTournamentData() async {
    print('üìä _loadTournamentData called with ID: $_tournamentId');
    if (_tournamentId == null) {
      print('‚ùå Tournament ID is null');
      return;
    }
    
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });

      // Load tournament details
      _tournament = await _tournamentService.getTournamentById(_tournamentId!);
      
      // Load participants
      _participants = await _tournamentService.getTournamentParticipants(_tournamentId!);
      
      // Load matches
      _matches = await _tournamentService.getTournamentMatches(_tournamentId!);
      
      // Check if user is already registered
      _isRegistered = await _tournamentService.isRegisteredForTournament(_tournamentId!);
      
      // Convert tournament model to UI data format
      _convertTournamentToUIData();
      
      print('‚úÖ Tournament data loaded successfully');
      print('Tournament data keys: ${_tournamentData.keys}');
      
      setState(() {
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
        _error = e.toString();
      });
    }
  }

  void _convertTournamentToUIData() {
    if (_tournament == null) return;
    
    _tournamentData = {
      "id": _tournament!.id,
      "title": _tournament!.title,
      "format": _tournament!.tournamentType,
      "coverImage": _tournament!.coverImageUrl ?? 
          "https://images.unsplash.com/photo-1578662996442-48f60103fc96?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3",
      "location": "T·ª´ d·ªØ li·ªáu CLB", // TODO: Get from club data
      "startDate": _formatDate(_tournament!.startDate),
      "endDate": _tournament!.endDate != null ? _formatDate(_tournament!.endDate!) : null,
      "registrationDeadline": _formatDate(_tournament!.registrationDeadline),
      "currentParticipants": _tournament!.currentParticipants,
      "maxParticipants": _tournament!.maxParticipants,
      "eliminationType": _tournament!.tournamentType,
      "status": _getStatusText(_tournament!.status),
      "entryFee": _tournament!.entryFee > 0 ? "${_tournament!.entryFee.toStringAsFixed(0)} VNƒê" : "Mi·ªÖn ph√≠",
      "rankRequirement": _tournament!.skillLevelRequired ?? "T·∫•t c·∫£",
      "description": _tournament!.description,
      "prizePool": {
        "total": "${_tournament!.prizePool.toStringAsFixed(0)} VNƒê",
        // TODO: Parse prize distribution if available
        "first": "${(_tournament!.prizePool * 0.5).toStringAsFixed(0)} VNƒê",
        "second": "${(_tournament!.prizePool * 0.3).toStringAsFixed(0)} VNƒê",
        "third": "${(_tournament!.prizePool * 0.2).toStringAsFixed(0)} VNƒê"
      }
    };
  }

  List<Map<String, dynamic>> _convertParticipantsToUIData() {
    return _participants.map((participant) {
      return {
        "id": participant.id,
        "name": participant.fullName,
        "avatar": participant.avatarUrl ?? 
            "https://cdn.pixabay.com/photo/2015/03/04/22/35/avatar-659652_640.png",
        "rank": participant.rank ?? participant.skillLevel,
        "elo": participant.eloRating,
        "registrationDate": _formatDate(participant.createdAt)
      };
    }).toList();
  }

  String _formatDate(DateTime date) {
    return "${date.day}/${date.month}/${date.year}";
  }

  String _getStatusText(String status) {
    switch (status.toLowerCase()) {
      case 'upcoming':
        return 'S·∫Øp di·ªÖn ra';
      case 'registration_open':
        return 'ƒêang m·ªü ƒëƒÉng k√Ω';
      case 'ongoing':
        return 'ƒêang di·ªÖn ra';
      case 'completed':
        return 'ƒê√£ k·∫øt th√∫c';
      default:
        return status;
    }
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.lightTheme.scaffoldBackgroundColor,
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    if (_isLoading) {
      return const Center(
        child: CircularProgressIndicator(),
      );
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.error_outline,
              size: 64,
              color: Colors.grey[400],
            ),
            const SizedBox(height: 16),
            Text(
              'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin gi·∫£i ƒë·∫•u',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              _error!,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.grey[500],
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: _loadTournamentData,
              child: const Text('Th·ª≠ l·∫°i'),
            ),
          ],
        ),
      );
    }

    if (_tournament == null) {
      return const Center(
        child: Text('Kh√¥ng t√¨m th·∫•y gi·∫£i ƒë·∫•u'),
      );
    }

    return Scaffold(
      backgroundColor: AppTheme.lightTheme.scaffoldBackgroundColor,
      body: NestedScrollView(
        controller: _scrollController,
        headerSliverBuilder: (context, innerBoxIsScrolled) {
          return [
            TournamentHeaderWidget(
              tournament: _tournamentData,
              scrollController: _scrollController,
              onShareTap: _handleShareTournament,
              onMenuAction: _handleMenuAction,
            ),
          ];
        },
        body: Column(
          children: [
            Container(
              color: AppTheme.lightTheme.colorScheme.surface,
              child: TabBar(
                controller: _tabController,
                tabs: const [
                  Tab(text: 'T·ªïng quan'),
                  Tab(text: 'B·∫£ng ƒë·∫•u'),
                  Tab(text: 'Th√†nh vi√™n'),
                  Tab(text: 'Lu·∫≠t thi ƒë·∫•u'),
                ],
                labelColor: AppTheme.lightTheme.colorScheme.primary,
                unselectedLabelColor:
                    AppTheme.lightTheme.colorScheme.onSurfaceVariant,
                indicatorColor: AppTheme.lightTheme.colorScheme.primary,
              ),
            ),
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  _buildOverviewTab(),
                  _buildBracketTab(),
                  _buildParticipantsTab(),
                  _buildRulesTab(),
                ],
              ),
            ),
          ],
        ),
      ),
      bottomNavigationBar: CustomBottomBar(
        currentRoute: '/tournament-detail-screen',
        onTap: _handleBottomNavTap,
      ),
    );
  }

  Widget _buildOverviewTab() {
    return SingleChildScrollView(
  padding: const EdgeInsets.only(bottom: Gaps.lg),
      child: Column(
        children: [
          const SizedBox(height: Gaps.lg),
          TournamentInfoWidget(tournament: _tournamentData),
          const SizedBox(height: Gaps.lg),
          PrizePoolWidget(tournament: _tournamentData),
          const SizedBox(height: Gaps.lg),
          RegistrationWidget(
            tournament: _tournamentData,
            isRegistered: _isRegistered,
            onRegisterTap: _handleRegistration,
            onWithdrawTap: _handleWithdrawal,
          ),
        ],
      ),
    );
  }

  Widget _buildBracketTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.only(bottom: Gaps.lg),
      child: Column(
        children: [
          const SizedBox(height: Gaps.lg),
          TournamentBracketWidget(
            tournament: _tournamentData,
            bracketData: _matches.isNotEmpty ? _matches : _getDefaultBracketData(),
          ),
        ],
      ),
    );
  }

  List<Map<String, dynamic>> _getDefaultBracketData() {
    // Return empty or placeholder bracket data when no matches exist
    if (_participants.isEmpty) {
      return [];
    }
    
    // Generate placeholder matches from participants if tournament hasn't started
    return [
      {
        "matchId": "placeholder_001",
        "round": 1,
        "player1": null,
        "player2": null,
        "winner": null,
        "status": "pending"
      }
    ];
  }

  Widget _buildParticipantsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.only(bottom: Gaps.lg),
      child: Column(
        children: [
          const SizedBox(height: Gaps.lg),
          ParticipantsListWidget(
            participants: _convertParticipantsToUIData(),
            onViewAllTap: _handleViewAllParticipants,
          ),
        ],
      ),
    );
  }

  Widget _buildRulesTab() {
    List<String> rules = [];
    if (_tournament?.rules != null && _tournament!.rules!.isNotEmpty) {
      // Split rules if they're in a single string
      rules = _tournament!.rules!.split('\n').where((rule) => rule.trim().isNotEmpty).toList();
    } else {
      rules = _tournamentRules; // Fallback to default rules
    }
    
    return SingleChildScrollView(
      padding: const EdgeInsets.only(bottom: Gaps.lg),
      child: Column(
        children: [
          const SizedBox(height: Gaps.lg),
          TournamentRulesWidget(rules: rules),
        ],
      ),
    );
  }

  void _handleShareTournament() {
    // Handle tournament sharing
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          'ƒê√£ sao ch√©p link gi·∫£i ƒë·∫•u',
          style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(
            color: AppTheme.lightTheme.colorScheme.onInverseSurface,
          ),
        ),
        backgroundColor: AppTheme.lightTheme.colorScheme.inverseSurface,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  void _handleRegistration() {
    print('üéØ _handleRegistration called!');
    print('Tournament data: $_tournamentData');
    
    // Validation checks
    if (_tournamentData.isEmpty) {
      print('‚ùå Tournament data is empty');
      _showMessage('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin gi·∫£i ƒë·∫•u', isError: true);
      return;
    }
    
    // Show simple confirmation dialog
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n ƒëƒÉng k√Ω'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Gi·∫£i ƒë·∫•u: ${_tournamentData['title'] ?? 'Kh√¥ng r√µ'}'),
            const SizedBox(height: 8),
            Text('L·ªá ph√≠: ${_tournamentData['entryFee'] ?? 'Mi·ªÖn ph√≠'}'),
            const SizedBox(height: 16),
            const Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng k√Ω tham gia gi·∫£i ƒë·∫•u n√†y?'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _performRegistration();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('ƒêƒÉng k√Ω ngay'),
          ),
        ],
      ),
    );
  }

  Future<void> _performRegistration() async {
    print('üöÄ Performing registration...');
    
    try {
      // Show loading message
      _showMessage('ƒêang x·ª≠ l√Ω ƒëƒÉng k√Ω...', duration: 2);
      
      // Call registration service
      final success = await _tournamentService.registerForTournament(
        _tournamentData['id'],
        paymentMethod: '0', // Default to pay at venue
      );
      
      print('Registration result: $success');
      
      if (success && mounted) {
        // Update UI state
        setState(() {
          _isRegistered = true;
        });
        
        // Reload tournament data
        await _loadTournamentData();
        
        // Show success message
        _showMessage(
          'ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng thanh to√°n t·∫°i qu√°n khi ƒë·∫øn thi ƒë·∫•u.',
          isError: false,
          duration: 5,
        );
        
        print('‚úÖ Registration completed successfully');
      } else {
        throw Exception('Registration service returned false');
      }
    } catch (error) {
      print('‚ùå Registration failed: $error');
      if (mounted) {
        _showMessage(
          'ƒêƒÉng k√Ω th·∫•t b·∫°i: ${error.toString()}',
          isError: true,
          duration: 5,
        );
      }
    }
  }

  void _showMessage(String message, {bool isError = false, int duration = 3}) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: isError ? Colors.red : Colors.green,
          duration: Duration(seconds: duration),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      );
    }
  }

  void _handleWithdrawal() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
          'X√°c nh·∫≠n r√∫t lui',
          style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(
            fontWeight: FontWeight.bold,
          ),
        ),
        content: Text(
          'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën r√∫t lui kh·ªèi gi·∫£i ƒë·∫•u n√†y? L·ªá ph√≠ ƒë√£ ƒë√≥ng s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ 80%.',
          style: AppTheme.lightTheme.textTheme.bodyMedium,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(
              'H·ªßy',
              style: AppTheme.lightTheme.textTheme.labelLarge?.copyWith(
                color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,
              ),
            ),
          ),
          ElevatedButton(
            onPressed: () {
              final scaffoldMessenger = ScaffoldMessenger.of(context);
              Navigator.pop(context);
              if (mounted) {
                setState(() {
                  _isRegistered = false;
                });
                scaffoldMessenger.showSnackBar(
                  SnackBar(
                    content: Text(
                      'ƒê√£ r√∫t lui kh·ªèi gi·∫£i ƒë·∫•u th√†nh c√¥ng',
                      style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(
                        color: AppTheme.lightTheme.colorScheme.onInverseSurface,
                      ),
                    ),
                    backgroundColor:
                        AppTheme.lightTheme.colorScheme.inverseSurface,
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: AppTheme.lightTheme.colorScheme.error,
            ),
            child: Text(
              'R√∫t lui',
              style: AppTheme.lightTheme.textTheme.labelLarge?.copyWith(
                color: AppTheme.lightTheme.colorScheme.onError,
              ),
            ),
          ),
        ],
      ),
    );
  }



  void _handleViewAllParticipants() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
  height: 600,
        decoration: BoxDecoration(
          color: AppTheme.lightTheme.colorScheme.surface,
          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(Gaps.xl),
              child: Column(
                children: [
                  Container(
                    width: 70,
                    height: 4,
                    decoration: BoxDecoration(
                      color: AppTheme.lightTheme.colorScheme.outline
                          .withValues(alpha: 0.3),
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  const SizedBox(height: Gaps.lg),
                  Text(
                    'Danh s√°ch tham gia (${_participantsData.length})',
                    style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(horizontal: Gaps.xl),
                itemCount: _participantsData.length,
                itemBuilder: (context, index) {
                  final participant = _participantsData[index];
                  return Container(
                    margin: const EdgeInsets.only(bottom: Gaps.sm),
                    padding: const EdgeInsets.all(Gaps.lg),
                    decoration: BoxDecoration(
                      color: AppTheme.lightTheme.colorScheme.surface,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(
                        color: AppTheme.lightTheme.colorScheme.outline
                            .withValues(alpha: 0.2),
                        width: 1,
                      ),
                    ),
                    child: Row(
                      children: [
                        Text(
                          '${index + 1}',
                          style: AppTheme.lightTheme.textTheme.bodyMedium
                              ?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: AppTheme.lightTheme.colorScheme.primary,
                          ),
                        ),
                        const SizedBox(width: Gaps.md),
                        Container(
                          width: 54,
                          height: 54,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(27),
                          ),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(27),
                            child: CustomImageWidget(
                              imageUrl: participant["avatar"] as String,
                              width: 54,
                              height: 54,
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                        const SizedBox(width: Gaps.md),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                participant["name"] as String,
                                style: AppTheme.lightTheme.textTheme.bodyLarge
                                    ?.copyWith(
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              Text(
                                'Rank ${participant["rank"]} ‚Ä¢ ${participant["elo"]} ELO',
                                style: AppTheme.lightTheme.textTheme.bodySmall
                                    ?.copyWith(
                                  color: AppTheme
                                      .lightTheme.colorScheme.onSurfaceVariant,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _handleBottomNavTap(String route) {
    if (route != '/tournament-detail-screen') {
      Navigator.pushNamedAndRemoveUntil(
        context,
        route,
        (route) => false,
      );
    }
  }

  void _showBracketView() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => TournamentBracketView(
        tournamentId: _tournamentData['id'] as String,
        format: _tournamentData['format'] as String,
        totalParticipants: _tournamentData['currentParticipants'] as int,
        isEditable: _canManageTournament(),
      ),
    );
  }

  void _showParticipantManagement() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.9,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: ParticipantManagementTab(
          tournamentId: _tournamentData['id'] as String,
        ),
      ),
    );
  }

  void _showManagementPanel() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => TournamentManagementPanel(
        tournamentId: _tournamentData['id'] as String,
        tournamentStatus: _tournamentData['status'] as String,
        onStatusChanged: () {
          // Reload tournament data if needed
          setState(() {});
        },
      ),
    );
  }

  void _showMatchManagement() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.9,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
        ),
        child: MatchManagementTab(
          tournamentId: _tournamentData['id'] as String,
        ),
      ),
    );
  }

  void _showTournamentStats() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => TournamentStatsView(
        tournamentId: _tournamentData['id'] as String,
        tournamentStatus: _tournamentData['status'] as String,
      ),
    );
  }

  void _handleMenuAction(String action) {
    switch (action) {
      case 'participants':
        _showParticipantManagement();
        break;
      case 'bracket':
        _showBracketView();
        break;
      case 'matches':
        _showMatchManagement();
        break;
      case 'stats':
        _showTournamentStats();
        break;
      case 'manage':
        if (_canManageTournament()) {
          _showManagementPanel();
        }
        break;
      case 'share':
        _shareTournament();
        break;
    }
  }

  bool _canManageTournament() {
    // Add logic to check if current user can manage this tournament
    // For now, return true for demo
    return true;
  }

  void _shareTournament() {
    // Implementation for sharing tournament
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text("T√≠nh nƒÉng chia s·∫ª ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn"),
        backgroundColor: AppTheme.lightTheme.colorScheme.primary,
      ),
    );
  }
}
