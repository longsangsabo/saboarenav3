#!/usr/bin/env python3
"""
√Åp d·ª•ng Real Payment System v√†o Supabase Database
"""
import os
from supabase import create_client, Client
import sys

# Supabase credentials
SUPABASE_URL = "https://mogjjvscxjwvhtpkrlqr.supabase.co"
SUPABASE_SERVICE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1vZ2pqdnNjeGp3dmh0cGtybHFyIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzkxOTU4MCwiZXhwIjoyMDczNDk1NTgwfQ.Xq8zXMT7_xGNKbGv5O_1n-iBgASdZHBTQO3KjVUWHd8"

def setup_real_payment_system():
    """Thi·∫øt l·∫≠p h·ªá th·ªëng thanh to√°n th·ª±c t·∫ø"""
    
    print("üöÄ THI·∫æT L·∫¨P H·ªÜ TH·ªêNG THANH TO√ÅN TH·ª∞C T·∫æ")
    print("=" * 60)
    
    try:
        # K·∫øt n·ªëi Supabase
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        print("‚úÖ K·∫øt n·ªëi Supabase th√†nh c√¥ng")
        
        # ƒê·ªçc SQL script
        sql_file = "/workspaces/saboarenav3/real_payment_system_setup.sql"
        if not os.path.exists(sql_file):
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file SQL: {sql_file}")
            return False
            
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        print("üìú ƒê√£ ƒë·ªçc SQL script")
        
        # T√°ch c√°c c√¢u l·ªánh SQL
        sql_statements = [stmt.strip() for stmt in sql_content.split(';') 
                         if stmt.strip() and not stmt.strip().startswith('--')]
        
        print(f"üîß Th·ª±c thi {len(sql_statements)} c√¢u l·ªánh SQL...")
        
        success_count = 0
        error_count = 0
        
        for i, statement in enumerate(sql_statements, 1):
            if not statement or len(statement) < 10:
                continue
                
            try:
                # Th·ª±c thi t·ª´ng c√¢u l·ªánh
                result = supabase.rpc('exec_sql', {'sql': statement + ';'})
                success_count += 1
                print(f"‚úÖ [{i}/{len(sql_statements)}] Th√†nh c√¥ng")
                
            except Exception as e:
                error_count += 1
                print(f"‚ö†Ô∏è [{i}/{len(sql_statements)}] L·ªói: {str(e)[:100]}...")
                # Ti·∫øp t·ª•c v·ªõi c√¢u l·ªánh ti·∫øp theo
        
        print("\n" + "=" * 60)
        print(f"üìä K·∫æT QU·∫¢ THI·∫æT L·∫¨P:")
        print(f"   ‚úÖ Th√†nh c√¥ng: {success_count}")
        print(f"   ‚ö†Ô∏è L·ªói: {error_count}")
        
        # T·∫°o d·ªØ li·ªáu m·∫´u
        if success_count > 0:
            print("\nüîß T·∫°o d·ªØ li·ªáu m·∫´u...")
            create_sample_data(supabase)
        
        print("\nüéâ HO√ÄN TH√ÄNH THI·∫æT L·∫¨P H·ªÜ TH·ªêNG THANH TO√ÅN!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói nghi√™m tr·ªçng: {e}")
        return False

def create_sample_data(supabase: Client):
    """T·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng thanh to√°n"""
    
    try:
        # L·∫•y club ID ƒë·∫ßu ti√™n
        clubs_result = supabase.table('clubs').select('id').limit(1).execute()
        if not clubs_result.data:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y CLB n√†o ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u")
            return
            
        club_id = clubs_result.data[0]['id']
        print(f"üè¢ S·ª≠ d·ª•ng CLB ID: {club_id}")
        
        # T·∫°o payment methods m·∫´u
        sample_payment_methods = [
            {
                'club_id': club_id,
                'method_type': 'bank',
                'method_name': 'Vietcombank',
                'account_info': {
                    'bankName': 'Vietcombank',
                    'accountNumber': '1234567890',
                    'accountName': 'SABO BILLIARDS'
                },
                'is_active': True,
                'display_order': 1
            },
            {
                'club_id': club_id,
                'method_type': 'momo',
                'method_name': 'MoMo',
                'account_info': {
                    'phoneNumber': '0901234567',
                    'receiverName': 'SABO BILLIARDS'
                },
                'is_active': True,
                'display_order': 2
            },
            {
                'club_id': club_id,
                'method_type': 'zalopay',
                'method_name': 'ZaloPay',
                'account_info': {
                    'phoneNumber': '0901234567',
                    'receiverName': 'SABO BILLIARDS'
                },
                'is_active': True,
                'display_order': 3
            }
        ]
        
        # Insert payment methods
        for method in sample_payment_methods:
            try:
                result = supabase.table('payment_methods').insert(method).execute()
                print(f"‚úÖ T·∫°o ph∆∞∆°ng th·ª©c thanh to√°n: {method['method_name']}")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói t·∫°o {method['method_name']}: {e}")
        
        # T·∫°o club payment settings
        payment_settings = {
            'club_id': club_id,
            'settings': {
                'cash_enabled': True,
                'bank_enabled': True,
                'ewallet_enabled': True,
                'auto_confirm': False,
                'payment_timeout': 600,  # 10 minutes
                'currency': 'VND'
            }
        }
        
        try:
            supabase.table('club_payment_settings').insert(payment_settings).execute()
            print("‚úÖ T·∫°o c√†i ƒë·∫∑t thanh to√°n CLB")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°o c√†i ƒë·∫∑t thanh to√°n: {e}")
        
        # T·∫°o club balance
        balance_data = {
            'club_id': club_id,
            'balance': 0.0
        }
        
        try:
            supabase.table('club_balances').insert(balance_data).execute()
            print("‚úÖ T·∫°o s·ªë d∆∞ CLB")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°o s·ªë d∆∞ CLB: {e}")
            
        print("üéØ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!")
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o d·ªØ li·ªáu m·∫´u: {e}")

def test_payment_system():
    """Test h·ªá th·ªëng thanh to√°n"""
    
    print("\nüß™ KI·ªÇM TRA H·ªÜ TH·ªêNG THANH TO√ÅN")
    print("=" * 60)
    
    try:
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        
        # Test 1: Check tables exist
        tables_to_check = [
            'payments', 'invoices', 'club_payment_settings', 
            'payment_methods', 'webhook_logs', 'club_balances'
        ]
        
        for table in tables_to_check:
            try:
                result = supabase.table(table).select('*').limit(1).execute()
                print(f"‚úÖ B·∫£ng {table}: OK")
            except Exception as e:
                print(f"‚ùå B·∫£ng {table}: {e}")
        
        # Test 2: Check RPC functions
        functions_to_check = [
            'update_club_balance',
            'get_payment_stats',
            'expire_old_payments',
            'generate_invoice_number'
        ]
        
        for func in functions_to_check:
            try:
                # Test v·ªõi parameters gi·∫£
                if func == 'update_club_balance':
                    # Skip v√¨ c·∫ßn parameters th·ª±c
                    print(f"‚è≠Ô∏è Function {func}: Skipped (needs real params)")
                elif func == 'get_payment_stats':
                    print(f"‚è≠Ô∏è Function {func}: Skipped (needs real params)")
                elif func == 'expire_old_payments':
                    result = supabase.rpc(func).execute()
                    print(f"‚úÖ Function {func}: OK (expired {result.data} payments)")
                elif func == 'generate_invoice_number':
                    print(f"‚è≠Ô∏è Function {func}: Skipped (needs club_id)")
                    
            except Exception as e:
                print(f"‚ùå Function {func}: {e}")
        
        print("\n‚úÖ Ki·ªÉm tra h·ªá th·ªëng ho√†n t·∫•t!")
        
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra h·ªá th·ªëng: {e}")

def main():
    """Main function"""
    
    print("üí≥ SABO ARENA - REAL PAYMENT SYSTEM SETUP")
    print("Thi·∫øt l·∫≠p h·ªá th·ªëng thanh to√°n QR Code th·ª±c t·∫ø")
    print("=" * 60)
    
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        test_payment_system()
    else:
        success = setup_real_payment_system()
        if success:
            test_payment_system()
            
            print("\nüéØ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:")
            print("1. V√†o CLB Settings > Payment Settings")
            print("2. C·∫•u h√¨nh t√†i kho·∫£n ng√¢n h√†ng & v√≠ ƒëi·ªán t·ª≠")
            print("3. Test t·∫°o QR Code thanh to√°n")
            print("4. Ki·ªÉm tra webhook endpoints")
            print("5. Monitor payments qua admin panel")
            
            print("\nüìö T√çNH NƒÇNG ƒê√É C√ì:")
            print("‚úÖ QR Code VietQR cho ng√¢n h√†ng") 
            print("‚úÖ Deep links MoMo/ZaloPay")
            print("‚úÖ Real-time payment status tracking")
            print("‚úÖ Webhook handlers")
            print("‚úÖ Payment history & analytics")
            print("‚úÖ Auto-expire old payments")
            print("‚úÖ Secure payment data encryption")
            
        else:
            print("\n‚ùå Thi·∫øt l·∫≠p th·∫•t b·∫°i!")
            print("Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi database")

if __name__ == "__main__":
    main()