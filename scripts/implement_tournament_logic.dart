// üèÜ SABO ARENA - Tournament Logic Implementation
// Implement tournament formats, seeding, and prize pool distribution based on user requirements

void main() async {
  print('üèÜ IMPLEMENTING TOURNAMENT LOGIC FOR SABO ARENA');
  print('=' * 60);
  
  await implementTournamentFormats();
  await implementSeeding();
  await implementPrizePool();
  await implementSPAPoints();
  await implementELORewards();
  
  print('\n‚úÖ Tournament Logic Implementation completed!');
}

Future<void> implementTournamentFormats() async {
  print('\nüìã 1. TOURNAMENT FORMATS IMPLEMENTATION');
  print('-' * 40);
  
  final tournamentFormats = {
    'tournament_formats': [
      {
        'format_code': 'single_elimination',
        'format_name': 'Single Elimination',
        'format_name_vi': 'Lo·∫°i tr·ª±c ti·∫øp',
        'description': 'Players are eliminated after losing one match',
        'description_vi': 'Ng∆∞·ªùi ch∆°i b·ªã lo·∫°i sau khi thua m·ªôt tr·∫≠n',
        'elimination_type': 'single',
        'bracket_type': 'standard',
        'min_players': 4,
        'max_players': 64,
        'rounds_formula': 'log2(players)',
        'is_active': true
      },
      {
        'format_code': 'double_elimination_traditional',
        'format_name': 'Double Elimination (Traditional)',
        'format_name_vi': 'Lo·∫°i k√©p (Truy·ªÅn th·ªëng)',
        'description': 'Players must lose twice to be eliminated, traditional bracket',
        'description_vi': 'Ng∆∞·ªùi ch∆°i ph·∫£i thua hai l·∫ßn m·ªõi b·ªã lo·∫°i, theo ki·ªÉu truy·ªÅn th·ªëng',
        'elimination_type': 'double',
        'bracket_type': 'traditional',
        'min_players': 4,
        'max_players': 32,
        'rounds_formula': '2*log2(players)-1',
        'is_active': true
      },
      {
        'format_code': 'double_elimination_sabo',
        'format_name': 'Double Elimination (SABO)',
        'format_name_vi': 'Lo·∫°i k√©p (SABO)',
        'description': 'SABO style double elimination with modified bracket',
        'description_vi': 'Lo·∫°i k√©p theo phong c√°ch SABO v·ªõi bracket ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh',
        'elimination_type': 'double',
        'bracket_type': 'sabo_modified',
        'min_players': 4,
        'max_players': 32,
        'rounds_formula': '2*log2(players)-1',
        'is_active': true
      },
      {
        'format_code': 'song_to',
        'format_name': 'Song T√¥',
        'format_name_vi': 'Song T√¥',
        'description': 'Vietnamese traditional parallel tournament format',
        'description_vi': 'ƒê·ªãnh d·∫°ng gi·∫£i ƒë·∫•u song song truy·ªÅn th·ªëng Vi·ªát Nam',
        'elimination_type': 'parallel',
        'bracket_type': 'parallel_groups',
        'min_players': 8,
        'max_players': 64,
        'rounds_formula': 'log2(players/2)+2',
        'is_active': true
      },
      {
        'format_code': 'winner_takes_all',
        'format_name': 'Winner Takes All',
        'format_name_vi': 'Ng∆∞·ªùi th·∫Øng nh·∫≠n t·∫•t c·∫£',
        'description': 'Single winner tournament with all prizes',
        'description_vi': 'Gi·∫£i ƒë·∫•u m·ªôt ng∆∞·ªùi th·∫Øng nh·∫≠n t·∫•t c·∫£ gi·∫£i th∆∞·ªüng',
        'elimination_type': 'single',
        'bracket_type': 'winner_only',
        'min_players': 4,
        'max_players': 32,
        'rounds_formula': 'log2(players)',
        'is_active': true
      }
    ]
  };
  
  print('üèÜ Tournament Formats defined:');
  for (var format in tournamentFormats['tournament_formats']!) {
    print('   ‚Ä¢ ${format['format_name']} (${format['format_name_vi']})');
    print('     - Players: ${format['min_players']}-${format['max_players']}');
    print('     - Type: ${format['elimination_type']} elimination');
  }
}

Future<void> implementSeeding() async {
  print('\nüéØ 2. SEEDING SYSTEM IMPLEMENTATION');
  print('-' * 40);
  
  final seedingLogic = {
    'seeding_methods': [
      {
        'method_code': 'elo_based',
        'method_name': 'ELO-Based Seeding',
        'method_name_vi': 'X·∫øp h·∫°t gi·ªëng theo ELO',
        'description': 'Seed players based on their ELO rating',
        'description_vi': 'X·∫øp h·∫°t gi·ªëng ng∆∞·ªùi ch∆°i d·ª±a tr√™n ƒëi·ªÉm ELO',
        'priority': 1,
        'is_default': true
      },
      {
        'method_code': 'rank_based',
        'method_name': 'Rank-Based Seeding',
        'method_name_vi': 'X·∫øp h·∫°t gi·ªëng theo h·∫°ng',
        'description': 'Seed players based on their skill rank (K, I, H, G, F, E)',
        'description_vi': 'X·∫øp h·∫°t gi·ªëng ng∆∞·ªùi ch∆°i d·ª±a tr√™n h·∫°ng k·ªπ nƒÉng (K, I, H, G, F, E)',
        'priority': 2,
        'is_default': false
      },
      {
        'method_code': 'win_rate_based',
        'method_name': 'Win Rate-Based Seeding',
        'method_name_vi': 'X·∫øp h·∫°t gi·ªëng theo t·ª∑ l·ªá th·∫Øng',
        'description': 'Seed players based on their win percentage',
        'description_vi': 'X·∫øp h·∫°t gi·ªëng ng∆∞·ªùi ch∆°i d·ª±a tr√™n t·ª∑ l·ªá ph·∫ßn trƒÉm th·∫Øng',
        'priority': 3,
        'is_default': false
      },
      {
        'method_code': 'tournament_history',
        'method_name': 'Tournament History-Based',
        'method_name_vi': 'X·∫øp h·∫°t gi·ªëng theo l·ªãch s·ª≠ gi·∫£i ƒë·∫•u',
        'description': 'Seed players based on previous tournament performance',
        'description_vi': 'X·∫øp h·∫°t gi·ªëng ng∆∞·ªùi ch∆°i d·ª±a tr√™n th√†nh t√≠ch gi·∫£i ƒë·∫•u tr∆∞·ªõc',
        'priority': 4,
        'is_default': false
      }
    ]
  };
  
  print('üé≤ Seeding Methods:');
  for (var method in seedingLogic['seeding_methods']!) {
    print('   ‚Ä¢ ${method['method_name']} (${method['method_name_vi']})');
    print('     - Priority: ${method['priority']} ${method['is_default'] ? '(Default)' : ''}');
  }
  
  print('\nüìä Seeding Algorithm:');
  print('   1. Sort players by selected seeding method (ELO by default)');
  print('   2. Assign seed numbers: #1 (highest) to #N (lowest)');
  print('   3. Place seeds in bracket to avoid early strong matchups');
  print('   4. #1 vs #N, #2 vs #(N-1), etc. in later rounds');
}

Future<void> implementPrizePool() async {
  print('\nüí∞ 3. PRIZE POOL DISTRIBUTION');
  print('-' * 40);
  
  final prizeTypes = {
    'prize_types': [
      {
        'type_code': 'CASH',
        'type_name': 'Cash Prize',
        'type_name_vi': 'Ti·ªÅn th∆∞·ªüng',
        'description': 'Monetary reward in VND',
        'description_vi': 'Ph·∫ßn th∆∞·ªüng b·∫±ng ti·ªÅn m·∫∑t (VND)',
        'is_divisible': true,
        'currency': 'VND'
      },
      {
        'type_code': 'SPA_POINTS',
        'type_name': 'SPA Points',
        'type_name_vi': 'ƒêi·ªÉm SPA',
        'description': 'Club loyalty points for rewards exchange',
        'description_vi': 'ƒêi·ªÉm th∆∞·ªüng c·ªßa club d√πng ƒë·ªÉ ƒë·ªïi th∆∞·ªüng',
        'is_divisible': true,
        'currency': 'SPA'
      },
      {
        'type_code': 'TROPHY',
        'type_name': 'Trophy',
        'type_name_vi': 'C√∫p',
        'description': 'Physical trophy reward',
        'description_vi': 'Ph·∫ßn th∆∞·ªüng c√∫p v·∫≠t l√Ω',
        'is_divisible': false,
        'currency': null
      },
      {
        'type_code': 'FLAG',
        'type_name': 'Flag',
        'type_name_vi': 'C·ªù',
        'description': 'Championship flag reward',
        'description_vi': 'Ph·∫ßn th∆∞·ªüng c·ªù v√¥ ƒë·ªãch',
        'is_divisible': false,
        'currency': null
      },
      {
        'type_code': 'MEDAL',
        'type_name': 'Medal',
        'type_name_vi': 'Huy ch∆∞∆°ng',
        'description': 'Medal reward (Gold/Silver/Bronze)',
        'description_vi': 'Ph·∫ßn th∆∞·ªüng huy ch∆∞∆°ng (V√†ng/B·∫°c/ƒê·ªìng)',
        'is_divisible': false,
        'currency': null
      }
    ]
  };
  
  final distributionTemplates = {
    'distribution_templates': [
      {
        'template_code': 'winner_only',
        'template_name': 'Winner Takes All',
        'template_name_vi': 'Ng∆∞·ªùi th·∫Øng nh·∫≠n t·∫•t c·∫£',
        'distribution': [
          {'position': 1, 'percentage': 100.0, 'description': 'Champion takes everything'}
        ]
      },
      {
        'template_code': 'top_3',
        'template_name': 'Top 3 Distribution',
        'template_name_vi': 'Ph√¢n chia Top 3',
        'distribution': [
          {'position': 1, 'percentage': 60.0, 'description': 'Champion'},
          {'position': 2, 'percentage': 25.0, 'description': 'Runner-up'},
          {'position': 3, 'percentage': 15.0, 'description': 'Third place'}
        ]
      },
      {
        'template_code': 'top_4',
        'template_name': 'Top 4 Distribution',
        'template_name_vi': 'Ph√¢n chia Top 4',
        'distribution': [
          {'position': 1, 'percentage': 50.0, 'description': 'Champion'},
          {'position': 2, 'percentage': 25.0, 'description': 'Runner-up'},
          {'position': 3, 'percentage': 15.0, 'description': 'Third place'},
          {'position': 4, 'percentage': 10.0, 'description': 'Fourth place'}
        ]
      },
      {
        'template_code': 'flat_distribution',
        'template_name': 'Equal Distribution',
        'template_name_vi': 'Ph√¢n chia ƒë·ªÅu',
        'distribution': [
          {'position': 1, 'percentage': 25.0, 'description': 'Champion'},
          {'position': 2, 'percentage': 25.0, 'description': 'Runner-up'},
          {'position': 3, 'percentage': 25.0, 'description': 'Third place'},
          {'position': 4, 'percentage': 25.0, 'description': 'Fourth place'}
        ]
      }
    ]
  };
  
  print('üéÅ Prize Types:');
  for (var prize in prizeTypes['prize_types']!) {
    print('   ‚Ä¢ ${prize['type_name']} (${prize['type_name_vi']})');
    print('     - Divisible: ${prize['is_divisible']}');
  }
  
  print('\nüìä Distribution Templates:');
  for (var template in distributionTemplates['distribution_templates']!) {
    print('   ‚Ä¢ ${template['template_name']} (${template['template_name_vi']})');
    for (var dist in template['distribution']) {
      print('     - Position ${dist['position']}: ${dist['percentage']}%');
    }
  }
}

Future<void> implementSPAPoints() async {
  print('\n‚≠ê 4. SPA POINTS SYSTEM');
  print('-' * 40);
  
  final spaPointsLogic = {
    'participation_rewards': [
      {'min_players': 4, 'max_players': 7, 'base_points': 50},
      {'min_players': 8, 'max_players': 15, 'base_points': 75},
      {'min_players': 16, 'max_players': 31, 'base_points': 100},
      {'min_players': 32, 'max_players': 64, 'base_points': 150}
    ],
    'position_multipliers': [
      {'position': 1, 'multiplier': 3.0, 'description': 'Champion'},
      {'position': 2, 'multiplier': 2.5, 'description': 'Runner-up'},
      {'position': 3, 'multiplier': 2.0, 'description': 'Third place'},
      {'position': 4, 'multiplier': 1.8, 'description': 'Fourth place'},
      {'position_range': '5-8', 'multiplier': 1.5, 'description': 'Quarter-finals'},
      {'position_range': '9-16', 'multiplier': 1.2, 'description': 'Round of 16'},
      {'position_range': '17+', 'multiplier': 1.0, 'description': 'Participation'}
    ]
  };
  
  print('‚≠ê SPA Points Calculation:');
  print('   Base Points (by tournament size):');
  for (var reward in spaPointsLogic['participation_rewards']!) {
    print('     - ${reward['min_players']}-${reward['max_players']} players: ${reward['base_points']} points');
  }
  
  print('\n   Position Multipliers:');
  for (var multiplier in spaPointsLogic['position_multipliers']!) {
    if (multiplier.containsKey('position')) {
      print('     - Position ${multiplier['position']}: ${multiplier['multiplier']}x (${multiplier['description']})');
    } else {
      print('     - Position ${multiplier['position_range']}: ${multiplier['multiplier']}x (${multiplier['description']})');
    }
  }
  
  print('\n   Formula: Final SPA Points = Base Points √ó Position Multiplier');
}

Future<void> implementELORewards() async {
  print('\nüéØ 5. ELO TOURNAMENT REWARDS');
  print('-' * 40);
  
  final eloRewards = {
    'tournament_elo_rewards': [
      {'position': 1, 'elo_points': 75, 'description': 'Champion - Maximum reward'},
      {'position': 2, 'elo_points': 60, 'description': 'Runner-up - Excellent performance'},
      {'position': 3, 'elo_points': 50, 'description': 'Third place - Strong showing'},
      {'position': 4, 'elo_points': 40, 'description': 'Fourth place - Good performance'},
      {'position_range': '5-8', 'elo_points': 30, 'description': 'Quarter-finals - Solid play'},
      {'position_range': '9-16', 'elo_points': 20, 'description': 'Round of 16 - Respectable'},
      {'position_range': '17-32', 'elo_points': 15, 'description': 'First round+ - Participation'},
      {'position_range': '33+', 'elo_points': 10, 'description': 'Early exit - Minimum reward'}
    ]
  };
  
  print('üèÜ ELO Tournament Rewards (10-75 points):');
  for (var reward in eloRewards['tournament_elo_rewards']!) {
    if (reward.containsKey('position')) {
      print('   ‚Ä¢ Position ${reward['position']}: +${reward['elo_points']} ELO (${reward['description']})');
    } else {
      print('   ‚Ä¢ Position ${reward['position_range']}: +${reward['elo_points']} ELO (${reward['description']})');
    }
  }
  
  print('\nüìà Additional ELO Modifiers:');
  print('   ‚Ä¢ Tournament size bonus: +5 ELO for 32+ player tournaments');
  print('   ‚Ä¢ Upset bonus: +10 ELO for beating higher-ranked opponent');
  print('   ‚Ä¢ Perfect run bonus: +5 ELO for winning without losing a match (single elim)');
  print('   ‚Ä¢ Streak bonus: +3 ELO for 3+ consecutive tournament top-3 finishes');
}

// Database schema for tournament logic
String getTournamentLogicSQL() {
  return '''
-- üèÜ TOURNAMENT LOGIC TABLES

-- Tournament Formats Table
CREATE TABLE IF NOT EXISTS tournament_formats (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  format_code VARCHAR(30) NOT NULL UNIQUE,
  format_name VARCHAR(100) NOT NULL,
  format_name_vi VARCHAR(100) NOT NULL,
  description TEXT,
  description_vi TEXT,
  elimination_type VARCHAR(20) NOT NULL, -- 'single', 'double', 'parallel'
  bracket_type VARCHAR(30) NOT NULL, -- 'standard', 'traditional', 'sabo_modified', 'parallel_groups'
  min_players INTEGER NOT NULL,
  max_players INTEGER NOT NULL,
  rounds_formula VARCHAR(50) NOT NULL,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Prize Pool Configuration Table
CREATE TABLE IF NOT EXISTS prize_pools (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tournament_id UUID NOT NULL REFERENCES tournaments(id),
  prize_type VARCHAR(20) NOT NULL, -- 'CASH', 'SPA_POINTS', 'TROPHY', 'FLAG', 'MEDAL'
  total_amount DECIMAL(12,2),
  distribution_template VARCHAR(30) NOT NULL,
  custom_distribution JSONB, -- For custom percentage distributions
  created_by UUID NOT NULL REFERENCES users(id),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Prize Distribution Table
CREATE TABLE IF NOT EXISTS prize_distributions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  prize_pool_id UUID NOT NULL REFERENCES prize_pools(id),
  position INTEGER NOT NULL,
  amount DECIMAL(12,2) NOT NULL,
  percentage DECIMAL(5,2) NOT NULL,
  is_awarded BOOLEAN DEFAULT false,
  awarded_to UUID REFERENCES users(id),
  awarded_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);

-- SPA Points Rewards Table
CREATE TABLE IF NOT EXISTS spa_points_rewards (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  tournament_id UUID NOT NULL REFERENCES tournaments(id),
  base_points INTEGER NOT NULL,
  position_multiplier DECIMAL(3,2) NOT NULL,
  final_points INTEGER NOT NULL,
  position INTEGER NOT NULL,
  reason VARCHAR(100) NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Tournament ELO Rewards Table
CREATE TABLE IF NOT EXISTS tournament_elo_rewards (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES users(id),
  tournament_id UUID NOT NULL REFERENCES tournaments(id),
  base_elo_reward INTEGER NOT NULL,
  bonus_elo INTEGER DEFAULT 0,
  total_elo_reward INTEGER NOT NULL,
  position INTEGER NOT NULL,
  reason TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- Insert Tournament Formats
INSERT INTO tournament_formats (format_code, format_name, format_name_vi, description, description_vi, elimination_type, bracket_type, min_players, max_players, rounds_formula) VALUES
('single_elimination', 'Single Elimination', 'Lo·∫°i tr·ª±c ti·∫øp', 'Players are eliminated after losing one match', 'Ng∆∞·ªùi ch∆°i b·ªã lo·∫°i sau khi thua m·ªôt tr·∫≠n', 'single', 'standard', 4, 64, 'log2(players)'),
('double_elimination_traditional', 'Double Elimination (Traditional)', 'Lo·∫°i k√©p (Truy·ªÅn th·ªëng)', 'Players must lose twice to be eliminated, traditional bracket', 'Ng∆∞·ªùi ch∆°i ph·∫£i thua hai l·∫ßn m·ªõi b·ªã lo·∫°i, theo ki·ªÉu truy·ªÅn th·ªëng', 'double', 'traditional', 4, 32, '2*log2(players)-1'),
('double_elimination_sabo', 'Double Elimination (SABO)', 'Lo·∫°i k√©p (SABO)', 'SABO style double elimination with modified bracket', 'Lo·∫°i k√©p theo phong c√°ch SABO v·ªõi bracket ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh', 'double', 'sabo_modified', 4, 32, '2*log2(players)-1'),
('song_to', 'Song T√¥', 'Song T√¥', 'Vietnamese traditional parallel tournament format', 'ƒê·ªãnh d·∫°ng gi·∫£i ƒë·∫•u song song truy·ªÅn th·ªëng Vi·ªát Nam', 'parallel', 'parallel_groups', 8, 64, 'log2(players/2)+2'),
('winner_takes_all', 'Winner Takes All', 'Ng∆∞·ªùi th·∫Øng nh·∫≠n t·∫•t c·∫£', 'Single winner tournament with all prizes', 'Gi·∫£i ƒë·∫•u m·ªôt ng∆∞·ªùi th·∫Øng nh·∫≠n t·∫•t c·∫£ gi·∫£i th∆∞·ªüng', 'single', 'winner_only', 4, 32, 'log2(players)')
ON CONFLICT (format_code) DO NOTHING;

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_prize_pools_tournament_id ON prize_pools(tournament_id);
CREATE INDEX IF NOT EXISTS idx_prize_distributions_prize_pool_id ON prize_distributions(prize_pool_id);
CREATE INDEX IF NOT EXISTS idx_spa_points_rewards_user_id ON spa_points_rewards(user_id);
CREATE INDEX IF NOT EXISTS idx_spa_points_rewards_tournament_id ON spa_points_rewards(tournament_id);
CREATE INDEX IF NOT EXISTS idx_tournament_elo_rewards_user_id ON tournament_elo_rewards(user_id);
CREATE INDEX IF NOT EXISTS idx_tournament_elo_rewards_tournament_id ON tournament_elo_rewards(tournament_id);
''';
}