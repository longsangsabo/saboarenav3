#!/usr/bin/env python3
"""
Ph√¢n t√≠ch chi ti·∫øt workspace ƒë·ªÉ xem file n√†o c·∫ßn thi·∫øt v√† file n√†o c√≥ th·ªÉ d·ªçn d·∫πp
"""
import os
import json
from collections import defaultdict

def analyze_workspace():
    workspace_path = "/workspaces/saboarenav3"
    
    # Ph√¢n lo·∫°i file theo extension
    file_types = defaultdict(list)
    duplicate_files = defaultdict(list)
    
    # File patterns c√≥ th·ªÉ d·ªçn d·∫πp
    cleanup_patterns = [
        'check_',
        'analyze_',
        'test_',
        'debug_',
        'temp_',
        'backup_',
        'old_',
        'copy_',
        '_old',
        '_backup',
        '_temp',
        '_test'
    ]
    
    total_files = 0
    cleanup_candidates = []
    
    for root, dirs, files in os.walk(workspace_path):
        # Skip some directories
        skip_dirs = ['.git', '.dart_tool', 'build', 'node_modules', '.vscode']
        dirs[:] = [d for d in dirs if d not in skip_dirs]
        
        for file in files:
            full_path = os.path.join(root, file)
            rel_path = os.path.relpath(full_path, workspace_path)
            
            total_files += 1
            
            # Ph√¢n lo·∫°i theo extension
            ext = os.path.splitext(file)[1].lower()
            file_types[ext].append(rel_path)
            
            # T√¨m file c√≥ th·ªÉ d·ªçn d·∫πp
            filename_lower = file.lower()
            for pattern in cleanup_patterns:
                if pattern in filename_lower:
                    cleanup_candidates.append(rel_path)
                    break
    
    # T·∫°o b√°o c√°o
    print("üîç PH√ÇN T√çCH WORKSPACE SABOARENA V3")
    print("=" * 50)
    print(f"üìä T·ªïng s·ªë file: {total_files}")
    print()
    
    print("üìÅ PH√ÇN LO·∫†I THEO LO·∫†I FILE:")
    print("-" * 30)
    important_exts = ['.dart', '.py', '.sql', '.md', '.yaml', '.json']
    for ext in sorted(file_types.keys()):
        count = len(file_types[ext])
        if ext in important_exts or count > 10:
            print(f"{ext:8} : {count:4} files")
    print()
    
    print("üßπ FILE C√ì TH·ªÇ D·ªåN D·∫∏P:")
    print("-" * 30)
    print(f"T·ªïng s·ªë file c√≥ th·ªÉ d·ªçn d·∫πp: {len(cleanup_candidates)}")
    
    # Nh√≥m theo pattern
    pattern_groups = defaultdict(list)
    for file in cleanup_candidates:
        filename = os.path.basename(file).lower()
        for pattern in cleanup_patterns:
            if pattern in filename:
                pattern_groups[pattern].append(file)
                break
    
    for pattern, files in pattern_groups.items():
        if files:
            print(f"\nüìã Files with '{pattern}' pattern ({len(files)} files):")
            for file in sorted(files)[:5]:  # Show first 5
                print(f"   - {file}")
            if len(files) > 5:
                print(f"   ... and {len(files) - 5} more")
    
    print("\n" + "=" * 50)
    print("üí° KHUY·∫æN NGH·ªä:")
    print("- C√≥ th·ªÉ d·ªçn d·∫πp c√°c file test/debug/temp ƒë·ªÉ gi·∫£m clutter")
    print("- N√™n t·ªï ch·ª©c code th√†nh module r√µ r√†ng h∆°n")
    print("- Xem x√©t vi·ªác archive c√°c file c≈© kh√¥ng d√πng")
    
    return {
        'total_files': total_files,
        'file_types': dict(file_types),
        'cleanup_candidates': cleanup_candidates,
        'pattern_groups': dict(pattern_groups)
    }

if __name__ == "__main__":
    analyze_workspace()